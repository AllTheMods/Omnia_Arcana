plugins {
    id "idea"
    id 'maven-publish'
    id "net.neoforged.moddev" version '2.0.78'
}

base {
    archivesName = "omnia_arcana-$minecraft_version"
    group = mod_maven
    version = mod_version
}
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

neoForge {
    version = project.neo_version

    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    parchment {
        minecraftVersion = project.parchment_minecraft_version
        mappingsVersion = project.parchment_mappings_version
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }


    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            jvmArguments = ["-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition"]
            //jvmArgs("-XX:-OmitStackTraceInFastThrow") // uncomment when you get exceptions with null messages etc
            //jvmArgs '-XX:+UnlockCommercialFeatures' // uncomment for profiling

            systemProperty 'mixin.debug.verbose', 'true'
            systemProperty 'mixin.debug.export', 'true'

            logLevel = org.slf4j.event.Level.DEBUG
        }

        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()

            gameDirectory = project.file('run/server')

            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll('--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath())
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven { url = "https://maven.createmod.net" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://cursemaven.com" }
    maven {
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = 'https://maven.minecraftforge.net/' }
    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
        }
    }
}

dependencies {
    implementation  "net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}"
    implementation  "com.hollingsworth.ars_nouveau:ars_nouveau-1.21.1:${arsnouveau_version}"
    compileOnly     "com.hollingsworth.nuggets:nuggets-neoforge-1.21:${project.nuggets_version}"
    implementation  "dev.latvian.mods:kubejs-neoforge:${project.kubejs_version}"
    implementation  "vazkii.patchouli:Patchouli:1.21-${project.patchouli_version}"
    implementation  "top.theillusivec4.curios:curios-neoforge:${project.curios_version}+${project.minecraft_version}"
    implementation  "software.bernie.geckolib:geckolib-neoforge-${project.minecraft_version}:${project.geckolib_version}"
    implementation  "com.github.glitchfiend:TerraBlender-neoforge:1.21-${project.terrablender_version}"
//    jarJar          "net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}"

//    implementation("mezz.jei:jei-${jei_minecraft_version}-neoforge:${jei_version}")
}

sourceSets.main {
    java {
        srcDirs = ['src/main/java', 'src/api/omnia_arcana']
    }
    resources {
        srcDirs = ["src/generated/resources"]
        exclude ".cache"
    }
}

compileJava {
    options.compilerArgs = ["-Xdiags:verbose"]
}

jar {
    manifest.attributes([
            "MixinConfigs": "omnia_arcana.mixins.json"
    ])
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            neo_version            : neo_version,
            mod_id                 : mod_id,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
    ]
    inputs.properties replaceProperties
    filesMatching("META-INF/neoforge.mods.toml") {
        expand replaceProperties
    }
    from "src/main/resources"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}